# -*- coding: utf-8 -*-
"""11-010_Кулакова_13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14IpMXrmaDpteijwi8JBnREPJ34NzWUgG
"""

from tensorflow.keras.models import Sequential # НС прямого распространения
from tensorflow.keras.layers import Dense, Activation, Dropout, BatchNormalization # Основные слои
from tensorflow.keras import utils # Утилиты для to_categorical
from tensorflow.keras.preprocessing import image # Для отрисовки изображения
from tensorflow.keras.optimizers import Adam, Adadelta # Алгоритмы оптимизации, для настройки скорости обучения
import numpy as np # Библиотека работы с массивами
import matplotlib.pyplot as plt # Отрисовка изображений
from PIL import Image # Отрисовка изображений
import pandas as pd # Библиотека pandas
from google.colab import files # Импорт файлов
from sklearn.preprocessing import LabelEncoder, StandardScaler # Функции для нормализации данных
from sklearn import preprocessing # Пакет предварительной обработки данных
from sklearn.model_selection import train_test_split
from tensorflow.keras.metrics import R2Score
from keras.preprocessing.sequence import TimeseriesGenerator
from tensorflow.keras.layers import SimpleRNN, Dense, Dropout, LSTM, Flatten

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/ML/traff.csv', header=None)
df

xLen = 60

price = np.array([float(price.replace(',', '')) for price in df[1]])

scaler = StandardScaler()
scaled_values = scaler.fit_transform(price.reshape(-1, 1))
train, test = train_test_split(scaled_values, test_size=0.2, shuffle=False)

generator = TimeseriesGenerator(train, train, length=xLen, sampling_rate=1, batch_size=10)
validation_generator = TimeseriesGenerator(test, test, length=xLen, sampling_rate=1, batch_size=10)

model = Sequential()
model.add(LSTM(32, input_shape=(xLen, 1), return_sequences=True))
model.add(LSTM(64, return_sequences=True))
model.add(LSTM(128, return_sequences=True))
model.add(Flatten())
model.add(Dense(64, activation='linear'))
model.add(Dense(128, activation='linear'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

model.fit(generator, epochs=50, validation_data=validation_generator, verbose=1)

# Выводим графики ошибки
predict = model.predict(validation_generator, verbose=True)
plt.plot(test)
plt.plot(predict)
plt.legend()
plt.show()